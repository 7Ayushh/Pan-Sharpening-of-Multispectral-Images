# -*- coding: utf-8 -*-
"""scratch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UVLKnZY_1Jpmh3I1b9HkrewCV-r2KF1F
"""

import matplotlib.pyplot as plt
import numpy as np
import cv2
import scipy
import rasterio
from rasterio.plot import show
from PIL import Image


img_1 = rasterio.open('MS/MS_1.tif')
img_2 = rasterio.open('PAN/PAN_1.tif')

full_img = img_1.read()

num_bands = img_1.count
print("Number of bands in the image = ", num_bands)

img_band1 = img_1.read(1) #1 stands for 1st band. 
img_band2 = img_1.read(2) #2 stands for 2nd band. 
img_band3 = img_1.read(3) #3 stands for 3rd band.

img_band_pan = img_2.read(1)

fig = plt.figure(figsize=(10,10))
ax1 = fig.add_subplot(1,3,1)
ax1.imshow(np.dstack((img_band1,img_band2*0,img_band3*0)))
plt.title('Red Band')
ax2 = fig.add_subplot(1,3,2)
ax2.imshow(np.dstack((img_band1*0,img_band2,img_band3*0)))
plt.title('Green Band')
ax3 = fig.add_subplot(1,3,3)
ax3.imshow(np.dstack((img_band1*0,img_band2*0,img_band3)))
plt.title('Blue Band')
plt.show()
#ax3.imshow(img_band3, cmap='pink')

#To find out the coordinate reference system
print("Coordinate reference system: ", img_1.crs)

# Read metadata
metadata = img_1.meta
print('Metadata: {metadata}\n'.format(metadata=metadata))

#Read description, if any
desc = img_1.descriptions
print('Raster description: {desc}\n'.format(desc=desc))


#To find out geo transform
print("Geotransform : ", img_1.transform)

## Plot pixel value histogram in each band. 
#rasterio.plot.show_hist(full_img, bins=50, histtype='stepfilled', lw=0.0, stacked=False, alpha=0.3)
# Peak at 255 is pixels with no data, outside region of interest.

#clipped_img = full_img[:, 300:900, 300:900]
#clipped_img = full_img[:, :, :]
#plt.imshow(clipped_img[0,:,:])
#rasterio.plot.show_hist(clipped_img, bins=50, histtype='stepfilled', lw=0.0, stacked=False, alpha=0.3)
#Each band showing slightly different information

################# NDVI - normalized difference vegetation index ############
# NDVI = (NIR-Red)/(NIR+Red)

#Let us assume 1 is red and 2 is NIR
#red_clipped = clipped_img[0].astype('f4')
#nir_clipped = clipped_img[1].astype('f4')
#ndvi_clipped = (nir_clipped - red_clipped) / (nir_clipped + red_clipped)



img_ms = np.dstack((img_band1, img_band2, img_band3))
img_ms *= 1.3

# # Display the image
# plt.imshow(img_ms)
# plt.axis("off")
# plt.show()

print(img_band_pan.max())
img_band_pan /= img_band_pan.max()
print(img_band_pan.max())

#plt.style.use("classic")
#plt.style.use('Solarize_Light2')
fig = plt.figure(figsize=(12,8))
ax1  = fig.add_subplot(1, 2, 1)
ax1.imshow(img_ms)
plt.title('Multispectral Image')
ax2  = fig.add_subplot(1, 2, 2)
ax2.imshow(img_band_pan, cmap='gray')
plt.title('Panchromatic Image')
plt.show()

# Reversing a tuple using slicing technique
# New tuple is created
def Reverse(tuples):
    new_tup = tuples[::-1]
    return new_tup

new_size = Reverse(img_band_pan.shape)

# resize the input image to a size of PAN image
resized_ms = cv2.resize(img_ms, new_size)


print(f'Size of original Multisprectral Image: {img_ms.shape}')
print(f'Size of original Panchromatic Image: {img_band_pan.shape}')
print(f'Size of new Multisprectral Image: {resized_ms.shape}')

# fig = plt.figure(figsize=(12,8))
# ax1  = fig.add_subplot(1, 2, 1)
# ax1.imshow(resized_ms)
# ax2  = fig.add_subplot(1, 2, 2)
# ax2.imshow(img_band_pan, cmap='gray')
# plt.show()

"""# IHS
### $$Intensity = P - I \times IW$$
"""

im_bgr = cv2.cvtColor(resized_ms, cv2.COLOR_RGB2BGR)

# Convert the input images to the IHS color space
#image_ms_ihs = cv2.cvtColor(resized_ms, cv2.COLOR_BGR2HLS_FULL)
image_ms_hls = cv2.cvtColor(im_bgr, cv2.COLOR_BGR2HLS_FULL)

# Split the IHS images into their individual components
#image1_ms_i, image_ms_h, image_ms_s = cv2.split(image_ms_ihs)
image_ms_h, image_ms_l, image_ms_s = cv2.split(image_ms_hls)


# merge the fused intensity component with the hue and saturation components of one of the input images
#fused_image_ihs = cv2.merge((img_band_pan, image_ms_h, image_ms_s))
#    fused_image_hls = cv2.merge((image_ms_h, img_band_pan, image_ms_s))
fused_image_hls = cv2.merge((image_ms_h, img_band_pan, image_ms_s))


# convert the fused image back to the RGB color space
#fused_image_ms = cv2.cvtColor(fused_image_ihs, cv2.COLOR_HLS2BGR)
fused_image_ms_bgr = cv2.cvtColor(fused_image_hls, cv2.COLOR_HLS2BGR)

fused_image_ms_rgb = cv2.cvtColor(fused_image_ms_bgr, cv2.COLOR_BGR2RGB)

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 10), sharey=True, constrained_layout = True)
ax1.imshow(resized_ms)
ax1.set_title("Original Multispectral Image")
ax2.imshow(fused_image_ms_rgb*2)
ax2.set_title("IHS Transform")
plt.show()

"""# Simple Mean
### $$R' = \frac{R + P}{2}$$
### $$B' = \frac{B + P}{2}$$
### $$G' = \frac{G + P}{2}$$
"""

#red = resized_ms[0].transpose()
#green = resized_ms[1]
#blue = resized_ms[2]

#new_red = (red + img_band_pan)/2
#new_green = (green.transpose() + img_band_pan)/2
#new_blue = (blue.transpose() + img_band_pan)/2

red = resized_ms[0].transpose()
resized_ms.shape

resized_red = cv2.resize(img_band1, new_size)
resized_green = cv2.resize(img_band2, new_size)
resized_blue = cv2.resize(img_band3, new_size)

new_red = (resized_red + img_band_pan)/2
new_green = (resized_green + img_band_pan)/2
new_blue = (resized_blue + img_band_pan)/2

mean_ms = np.dstack((new_red, new_green, new_blue))

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 10), sharey=True, constrained_layout = True)
ax1.imshow(resized_ms)
ax1.set_title("Original Multispectral Image")
ax2.imshow(mean_ms*1.8)
ax2.set_title("Mean Transform")
plt.show()

"""# Gram-Schmidt Transformation"""

   

"""# Brovey's Trasformation"""

brovey_red = np.divide((np.multiply(resized_red, img_band_pan)),(resized_red + resized_green + resized_blue))
brovey_green = np.divide((np.multiply(resized_green, img_band_pan)),(resized_red + resized_green + resized_blue))
brovey_blue = np.divide((np.multiply(resized_blue, img_band_pan)),(resized_red + resized_green + resized_blue))

brovey_ms = np.dstack((brovey_red, brovey_green, brovey_blue))

fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 10), sharey=True, constrained_layout = True)
ax1.imshow(resized_ms)
ax1.set_title("Original Multispectral Image")
ax2.imshow(brovey_ms*5)
ax2.set_title("Brovey's Transform")
plt.show()

fig, ax = plt.subplots(2, 2, figsize=(8, 20), sharey=True, sharex=True, constrained_layout = True)
ax[0][0].imshow(resized_ms)
ax[0][0].set_title("Original Multispectral Image")
ax[0][1].imshow(fused_image_ms_rgb*2)
ax[0][1].set_title("IHS Transform")
ax[1][0].imshow(mean_ms*1.8)
ax[1][0].set_title("Mean Transform")
ax[1][1].imshow(brovey_ms*5)
ax[1][1].set_title("Brovey's Transform")
plt.show()

